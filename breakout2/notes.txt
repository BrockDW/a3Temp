Observations by Sub:
With observable pattern used for sprites, we can't manually set the order in which the sprites are drawn (z values). This isn't an issue for this game but could be an issue for other games.
Additionally, normally a game like this could have a pretty 'functional' core, where code updates a game state structure every frame, in which case the game state is completely decoupled from the code - I've implemented this game in Racket in the past and it was pretty clean. However, since the game state objects (ball, bricks, etc.) are observers, they need to subscribe to the observable - the main game class. This means that what would normally be just plain data structure classes now have to have references back to the main game class and call methods from that class to subscribe/unsubscribe. Though using the observer pattern comes with the benefit of having the update code in the same place as the data, whereas with a more functional style the data structures would have no code and there would be a big method that did all the updating.
